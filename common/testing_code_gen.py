# common/testing_code_gen.py
import sys
import importlib.util
from pathlib import Path
import pytest

# Ensure common/ is in sys.path when this file is imported
COMMON_DIR = Path(__file__).resolve().parent
if str(COMMON_DIR) not in sys.path:
    sys.path.insert(0, str(COMMON_DIR))

import code_generator


def generate_and_import_module(prompt, out_filename="gen_code.py", model="gpt-4o-mini", test_file=__file__):
    """
    Generate Python code using the shared code_generator, save it, and import it.

    Parameters:
        prompt (str): Prompt to send to the model.
        out_filename (str): Name of the file to save (relative to the test file's directory).
        model (str): OpenAI model name.
        test_file (str): __file__ of the calling test file.

    Returns:
        Python module object for the generated file.
    """
    base_dir = Path(test_file).parent.resolve()
    out_path = base_dir / out_filename

    code_generator.generate_code(model, prompt, out_path)

    if not out_path.exists():
        pytest.fail(f"{out_filename} was not generated by the code generator")

    module_name = out_filename.rstrip(".py")
    spec = importlib.util.spec_from_file_location(module_name, out_path)
    module = importlib.util.module_from_spec(spec)
    
    spec.loader.exec_module(module)
    return module

def generated_module_fixture(prompt, out_filename="gen_code.py", model="gpt-4o-mini"):
    """
    Returns a pytest fixture that will generate code and import it once per module.
    """
    @pytest.fixture(scope="module")
    def _fixture():
        return generate_and_import_module(prompt, out_filename, model=model, test_file=__file__)
    return _fixture