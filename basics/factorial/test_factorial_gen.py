# Testing code for AI-generated factorial functions

import importlib.util
import subprocess
import sys
import os
import pathlib

import pytest

@pytest.fixture(scope="module")
def generated_factorial_module():
    """Runs factorial_gen.py and imports the generated factorial.py."""
    # Ensure weâ€™re in the right directory
    base_dir = pathlib.Path(__file__).parent.resolve()
    
    # Step 1: Run factorial_gen.py to generate a file called factorial.py
    subprocess.run(
        [sys.executable, str(base_dir / "factorial_gen.py")],
        check=True
    )
    
    generated_file = base_dir / "factorial.py"
    if not generated_file.exists():
        pytest.fail("factorial.py was not generated by factorial_gen.py")
    
   
    # Step 2: Import the resultant file, factorial.py
    spec = importlib.util.spec_from_file_location("factorial", generated_file)
    factorial_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(factorial_module)
    
    return factorial_module


def test_factorial_basic(generated_factorial_module):
    factorial = generated_factorial_module.factorial
    assert factorial(0) == 1
    assert factorial(1) == 1
    assert factorial(5) == 120


def test_factorial_negative_input(generated_factorial_module):
    factorial = generated_factorial_module.factorial
    with pytest.raises(ValueError):
        factorial(-1)
    with pytest.raises(ValueError):
        factorial(-2)

def test_factorial_large_number(generated_factorial_module):
    factorial = generated_factorial_module.factorial
    assert factorial(10) == 3628800

# Step 3: test the factorial function within it